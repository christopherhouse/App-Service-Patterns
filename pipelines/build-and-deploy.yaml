trigger:
- main

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'Contoso-Integration'
  appServiceName: 'app-ctv-appsvc-eastus2-001'
  functionAppName: 'func-ctv-appsvc-eastus2-001'
  resourceGroupName: 'RG-CTV-APPSVC-EASTUS2-001'
  slotName: 'staging'

stages:
- stage: Build
  displayName: 'Build and Publish'
  jobs:
  - job: Build
    displayName: 'Build Job'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        mkdir $(Build.ArtifactStagingDirectory)/webapi
        dotnet build AdventureWorksApi/AdventureWorksApi.csproj --configuration $(buildConfiguration)
        dotnet publish AdventureWorksApi/AdventureWorksApi.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/webapi
      displayName: 'Build and Publish Web API Project'

    - script: |
        mkdir $(Build.ArtifactStagingDirectory)/function
        dotnet build AdventureWorks.AsyncProcessing/AdventureWorks.AsyncProcessing.csproj --configuration $(buildConfiguration)
        dotnet publish AdventureWorks.AsyncProcessing/AdventureWorks.AsyncProcessing.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/function
      displayName: 'Build and Publish Function App Project'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: Deploy
  displayName: 'Deploy to Azure App Service'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Deploy Job'
    environment: 'Development'
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webApp'
              appName: $(appServiceName)
              package: $(Pipeline.Workspace)/drop/webapi
              resourceGroupName: $(resourceGroupName)

          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'functionApp'
              appName: $(functionAppName)
              package: $(Pipeline.Workspace)/drop/function
              resourceGroupName: $(resourceGroupName)

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp traffic-routing set --name $(appServiceName) --resource-group $(resourceGroupName) --distribution $(slotName)=$(trafficPercentage)

          - task: ManualValidation@0
            inputs:
              instructions: 'Approve to increase traffic to 50%'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp traffic-routing set --name $(appServiceName) --resource-group $(resourceGroupName) --distribution $(slotName)=50

          - task: ManualValidation@0
            inputs:
              instructions: 'Approve to increase traffic to 75%'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp traffic-routing set --name $(appServiceName) --resource-group $(resourceGroupName) --distribution $(slotName)=75

          - task: ManualValidation@0
            inputs:
              instructions: 'Approve to swap staging and production slots'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp deployment slot swap --name $(appServiceName) --resource-group $(resourceGroupName) --slot $(slotName) --target-slot production